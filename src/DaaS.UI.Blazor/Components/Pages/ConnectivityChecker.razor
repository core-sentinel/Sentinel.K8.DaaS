@page "/connectivity-checker"


<div class="row">
    <div class="col-8">

        <Card Size="CardSize.Medium">
            <CardHeader>
                <h3>Check Connectivity</h3>
            </CardHeader>
            <CardBody>

                <EditForm Model="@request" OnValidSubmit="@SubmitValidForm">
                    <FluentValidationValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        <div class="col-sm-9">
                            @if (request is HttpConnectionCheckRequest)
                            {
                                <label for="url" class="form-label">URL</label>
                            }
                            else
                            {
                                <label for="url" class="form-label">Domain</label>
                            }
                            <input type="text" class="form-control" id="url" placeholder="Domain" @bind="request.Url">
                            <ValidationMessage class="alert alert-danger" For="@(() => request.Url)" />
                        </div>

                        <div class="col-sm-3">
                            <label for="lastName" class="form-label">Port</label>
                            <input type="number" class="form-control" id="port" placeholder="Port" @bind="request.Port">
                        </div>


                        <div class="col-md-6">
                            <label for="country" class="form-label">Category</label>

                            <select class="form-select" id="category" @bind="selectedCategoryValue" @bind:after="categoryChanged">
                                @foreach (var cat in connectionCheckDiscovery.Categories)
                                {
                                    <option value="@cat.Key">@cat.Value</option>
                                }
                            </select> 

                           @*  <select class="form-select" id="category"  @onchange="categoryChanged">
                                @foreach (var cat in connectionCheckDiscovery.Categories)
                                {
                                    <option value="@cat.Key">@cat.Value</option>
                                }
                            </select> *@
                        </div>

                        <div class="col-md-6">
                            <label for="state" class="form-label">Authentication</label>
                            <select class="form-select" id="authselect" required="" @bind="request.SelectedAuthenticationType">
                                <option value="None">None</option>
                                <option value="UseMSI">Use Managed Identity</option>
                                <option value="SP">Use Service Principal</option>
                            </select>
                        </div>
                    </div>
                    @if (request.SelectedAuthenticationType == "SP")
                    {
                        <hr class="my-4">
                        <h4> Service Principal</h4>

                        <div class="row g-3">
                            <div class="col-sm-12">
                                <input type="text" class="form-control" id="sp_tenantid" placeholder="Tanent ID" @bind="request.ServicePrincipal.TenantId">
                            </div>

                            <div class="col-sm-12">
                                <input type="text" class="form-control" id="sp_clientid" placeholder="Client ID" @bind="request.ServicePrincipal.ClientId">
                            </div>

                            <div class="col-sm-12">
                                <input type="password" class="form-control" id="sp_clientsecret" placeholder="Client Secret" @bind="request.ServicePrincipal.ClientSecret">
                            </div>
                        </div>
                    }
                    @if(request.AdditionalRequestRazorContentType !=null)
                    {
                        <DynamicComponent Type="@request.AdditionalRequestRazorContentType" Parameters="@requestDictionary" />
                    }
                    <hr class="my-4">
                    @if(disableSendButton){
                        <Progress Color="TablerColor.Purple" Indeterminate />
                    }
                    <Button BackgroundColor="TablerColor.Primary" class="w-100 btn btn-primary" IsLoading="disableSendButton" Disabled="disableSendButton" Type="ButtonType.Submit" Text="Send" />
                </EditForm>
            </CardBody>
        </Card>
    </div>

    <div class="col-4">
        @if (tcpPingConnectionResponse != null )
        {
            @if (tcpPingConnectionResponse.IsConnected)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
                    <CardBody>
                        <CardTitle>
                            <h3>Connected  </h3>
                            <h4>NetResponseTime: @tcpPingConnectionResponse.ElapsedMilliseconds</h4>
                            <h4> IP @tcpPingConnectionResponse.IPAddress</h4>
                        </CardTitle>
                        @* Card Body *@
                    </CardBody>
                </Card>
            }


            @if (tcpPingConnectionResponse.IsConnected == false)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Danger">
                    <CardHeader>
                        <h3>Connectiviy Failed</h3>
                    </CardHeader>
                    <CardBody>                       
                        <h4>NetResponseTime: @tcpPingConnectionResponse.ElapsedMilliseconds</h4>
                        <h4> <b> IP:  </b> @tcpPingConnectionResponse.IPAddress</h4>
                        <br />
                        @tcpPingConnectionResponse.Message
                    </CardBody>
                </Card>
            }
        }

        @if (additionalConnectionResponse != null)
        {
            @if (additionalConnectionResponse.IsConnected == true)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
                    <CardHeader>
                        <h3> Success @additionalConnectionResponse.CategoryTypeName</h3>
                    </CardHeader>
                    <CardBody>
                        <h4>NetResponseTime: @additionalConnectionResponse.ElapsedMilliseconds</h4>
                        <br />
                        <span style="white-space: pre-line">
                            @additionalConnectionResponse.Message
                        </span>
                    </CardBody>
                </Card>
            }

            @if (additionalConnectionResponse.IsConnected == false)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Danger">
                    <CardHeader>
                        <h3> Failed @additionalConnectionResponse.CategoryTypeName</h3>
                    </CardHeader>
                    <CardBody>
                        <h4>NetResponseTime: @additionalConnectionResponse.ElapsedMilliseconds</h4>
                        <br />
                        @additionalConnectionResponse.Message
                    </CardBody>
                </Card>
            }
            if(additionalConnectionResponse.ExtraResultRazorContentType != null)
            {
                <DynamicComponent Type="@additionalConnectionResponse.ExtraResultRazorContentType" Parameters="@additionalConnectionResponse.ExtraResultDictionary" />

                <span>additionalConnectionResponse</span>
            }
        }
    </div>
</div>





@code {
    [Inject] IMediator mediator { get; set; }=default!;
    [Inject] ConnectionCheckDiscovery connectionCheckDiscovery { get; set; } = default!;

    private string selectedCategoryValue;    

    private bool disableSendButton = false;
    private IBasicCheckAccessRequest request = new TcpPingConnectionCheckRequest();
    public Dictionary<string, object> requestDictionary { get; set; } = new Dictionary<string, object>();

    private string IPaddress;
    private TestNetConnectionResponse tcpPingConnectionResponse;
    private TestNetConnectionResponse additionalConnectionResponse;

    public ConnectivityChecker()
    {
        requestDictionary = new Dictionary<string, object>();
        requestDictionary.Add("RequestValue", request);


    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        selectedCategoryValue = connectionCheckDiscovery.Categories.Keys.First();
    }

    private void categoryChanged()
    {
        request = connectionCheckDiscovery.CreateCheckAccessRequest(selectedCategoryValue);
        requestDictionary = new Dictionary<string, object>();
        requestDictionary.Add("RequestValue", request);
    }

    private void categoryChanged(ChangeEventArgs e)
    {
        request = connectionCheckDiscovery.CreateCheckAccessRequest(e.Value.ToString());
        requestDictionary = new Dictionary<string, object>();
        requestDictionary.Add("RequestValue", request);
        selectedCategoryValue = e.Value.ToString();


    }


    private void ComponentUpdated()
    {
        StateHasChanged();
        // Code logic for the ComponentUpdated method
    }

    private async Task SubmitValidForm(){
        disableSendButton = true;
        Console.WriteLine(request.Url + ":" + request.Port.ToString());
        // Console.WriteLine(selectedCategoryValue.ToString() + " " + request.SelectedAuthenticationType);
        if (request.SelectedAuthenticationType == "UseMSI")
        {
            request.UseMSI = true;
        }
        else
        {
            request.UseMSI = false;
        }



        var tcprequest = new TcpPingConnectionCheckRequest { Url = request.Url, Port = request.Port };
        tcpPingConnectionResponse = await mediator.Send(tcprequest);
        Console.WriteLine(tcpPingConnectionResponse.IsConnected.ToString());

        if (request.Url == null || request.Url.StartsWith("http"))
        {
            HttpConnectionCheckRequest req = new HttpConnectionCheckRequest { HttpMethod = "Get", Url = request.Url, Port = request.Port };
            additionalConnectionResponse = await mediator.Send(req);
        }

        if (request is not TcpPingConnectionCheckRequest)
        {
            additionalConnectionResponse = await mediator.Send(request) as TestNetConnectionResponse;

            // additionalConnectionResponse = await mediator.Send(request);



            var ops = true;
        }
        else
        {
            additionalConnectionResponse = null;
        }


        disableSendButton = false;
    }
}