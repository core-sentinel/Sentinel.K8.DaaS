@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop

@using MediatR
@using Sentinel.ConnectionChecks;
@using TabBlazor


<div>
    <hr class="my-4">
    <h4 class="mb-3">HTTP    ---------> @(RequestValue.HttpMethod) @(RequestValue.Url) </h4>
    
    <div class="row g-3">
        <div class="col-md-3">
            <label for="state" class="form-label">Http Method</label>
            <select class="form-select" id="authselect" @bind="RequestValue.HttpMethod">
                <option value="Get">Get</option>
                <option value="Post">Post</option>
                <option value="Put">Put</option>
                <option value="Delete">Delete</option>
                <option value="Head">Head</option>
            </select>
        </div>
        <div class="col-md-9">
            <label for="url" class="form-label">URL</label>
            <input type="text" class="form-control" id="url" placeholder="URL" value="@RequestValue.Url" @onchange=UrlChanged> 
        </div>
    </div>
    @if (RequestValue.SelectedAuthenticationType == "UseMSI")
    {

        <div class="row g-3">

            <div class="col-md-12">
                <label for="url" class="form-label">Client ID</label>
                <input type="text" class="form-control" id="clientid" placeholder="ClientId" @bind="RequestValue.ServicePrincipal.ClientId">
                <ValidationMessage class="alert alert-danger" For="@(() => RequestValue.ServicePrincipal.ClientId)" />
            </div>
        </div>

    }
    <hr class="my-4">


    <ul class="list-group">
        <li  class="list-group-item">
            <div class="row g-3">
                <div class="col-md-4">Header</div>
                <div class="col-md-4">Value</div>
                <div class="col-md-4">
                    <Button BackgroundColor="TablerColor.Primary"
                            @onclick="() => addNewHeader()">Add</Button>
                   </div>
              
            </div>


            @* <input type="text" placeholder="Add notes..." />
                 <button @onclick="() => ToggleTaskCompletion(task)">
                    @(task.IsCompleted ? "Undo" : "Complete")
                </button> *@
        </li>
        @foreach (var header in RequestValue.Headers)
        {
            <li class="list-group-item">
              <div class="row g-3">
                    <div class="col-md-2">
                        <Checkbox Label="Enabled" @bind-Value="header.Enabled" />
                    </div>
                    <div class="col-md-4">
                        <input type="text" class="form-control"  placeholder="Key" @bind="header.Key">
                    </div> 
                    <div class="col-md-4">
                        <input type="text" class="form-control" placeholder="Value"  @bind="header.Value">
                    </div>  
               </div>
            </li>
        }
    </ul>



@*     <ul class="list-group">
        @foreach (var header in RequestValue.Headers)
        {
            <li class="list-group-item">
                <div class="row g-3">
                    <div class="col-md-2">
                        @header.Enabled
                    </div>
                    <div class="col-md-4">
                        @header.Key
                    </div>
                    <div class="col-md-4">
                        @header.Value
                    </div>
                </div>
            </li>
        }
    </ul> *@

</div>

@code {


    [Parameter]
    public string URL { get; set; }

    [Parameter]
    public HttpConnectionCheckRequest RequestValue { get; set; }


    [Parameter]
    public EventCallback<HttpConnectionCheckRequest> RequestValueChanged { get; set; }

    private async Task UrlChanged(ChangeEventArgs e)
    {

        RequestValue.Url = e.Value.ToString();

        await RequestValueChanged.InvokeAsync(RequestValue);
        this.StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        RequestValue.Headers.Add(new HttpHeader("Accept", "application/json",true));
        return base.OnInitializedAsync();

    }

    protected void addNewHeader()
    {
        RequestValue.Headers.Add(new HttpHeader("", "", true));
        this.StateHasChanged();
    }
}